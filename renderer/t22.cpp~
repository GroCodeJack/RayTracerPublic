#include "Vector3D.h"
#include "FrameBuffer.h"
#include "Triangle.h"
#include <vector>

Triangle::Triangle()
  : vertices(3)
{
  vertices[0] = Vector3D(0.0, 0.0, 0.0);
  vertices[1] = Vector3D(0.0,0.0, 0.0);
  vertices[2] = Vector3D(0.0, 0.0, 0.0);
}

Triangle::~Triangle(){}

Triangle::Triangle(const Vector3D& a, const Vector3D& b, const Vector3D& c)
  : vertices(3)
{
  vertices[0] = a;
  vertices[1] = b;
  vertices[2] = c;
}

const Vector3D Triangle::operator[](const int idx) const {
  return vertices[idx];
}

Vector3D &Triangle::operator[](const int idx){
  return vertices[idx];
}

bool Triangle::closestHit(const Ray &r){

  float alpha = (
		 ((t[1][1] - t[2][1])*x) +
		 ((t[2][0] - t[1][0])*y) +
		 ((t[1][0] * t[2][1]) - (t[2][0] * t[1][1])))
            /
    (((t[1][1] - t[2][1])*t[0][0]) +
     ((t[2][0] - t[1][0])*t[0][1]) +
     ((t[1][0] * t[2][1]) - (t[2][0] * t[1][1] )));


  float beta = (((t[2][1] - t[0][1])*x) +
		((t[0][0] - t[2][0])*y) +
		((t[2][0] * t[0][1]) - (t[0][0] * t[2][1] )))
            /
    (((t[2][1] - t[0][1])*t[1][0]) +
     ((t[0][0] - t[2][0])*t[1][1]) +
     ((t[2][0] * t[0][1]) - (t[0][0]*t[2][1] )));

  float gamma = (((t[0][1] - t[1][1])*x) +
		 ((t[1][0] - t[0][0])*y) +
		 ((t[0][0] * t[1][1]) - (t[1][0] * t[0][1])))
            /
    (((t[0][1] - t[1][1]) * t[2][0]) +
     ((t[1][0] - t[0][0]) * t[2][1]) +
     ((t[0][0] * t[1][1]) - (t[1][0] * t[0][1])));
  
}
